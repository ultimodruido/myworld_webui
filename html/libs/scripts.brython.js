__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1654625865639, "scripts.boxes": [".py", "box_list=(\n\"00001\",\n\"00002\",\n\"00003\",\n\"00004\",\n\"00005\",\n\"29306\",\n\"29307\",\n\"29308\",\n\"29330\",\n\"29334\",\n\"29335\",\n\"29338\",\n\"29340\",\n\"29341\",\n\"29342\",\n\"29346\",\n\"29406\",\n\"29430\",\n)\n", []], "scripts.control_center": [".py", "import json\n\nfrom browser import document,ajax\n\nfrom .deps import server_address\nfrom .lib_check_server import check_server\nfrom .control_center_deps import TrainCard\n\n\ndef load_trains(reply):\n\n card_field=document['cards_container']\n config=json.loads(reply.text)\n \n \n for train_id,item in enumerate(config['data']['train_list']):\n  tc=TrainCard(train_id,item['name'],item['box'])\n  card_field <=tc.element\n  \n  \ndef control_center_main():\n check_server()\n if server_address is not None :\n \n  ajax.get(f\"{server_address}/train_list\",oncomplete=load_trains)\n  \n  \n", ["browser", "json", "scripts.control_center_deps", "scripts.deps", "scripts.lib_check_server"]], "scripts.control_center_deps": [".py", "from browser import html,ajax,window\n\nfrom ui.classes import Element\nfrom ui.slider import Slider\nfrom ui.buttons import Button\n\nfrom .deps import server_address\n\n\njq=window.jQuery\n\n\nclass TrainCard(Element):\n def __init__(self,train_id,train_name,box_code=\"\"):\n  super().__init__(None ,html.DIV,['ui','card'])\n  \n  self.element.id=f\"train_{train_id}\"\n  self.direction=\"F\"\n  self.train_id=train_id\n  \n  \n  tmp_el_1=Element(None ,html.DIV,['image'])\n  tmp_el_2=Element(None ,html.IMG,[])\n  tmp_el_2.element.src=f\"./data/{box_code}.jpg\"\n  \n  tmp_el_1 <=tmp_el_2.element\n  self <=tmp_el_1.element\n  \n  \n  tmp_el_1=Element(None ,html.DIV,['content'])\n  self <=tmp_el_1.element\n  \n  tmp_el_2=Element(None ,html.H2,['ui','dividing','blue','header'])\n  tmp_el_2.set_text(train_name)\n  \n  tmp_el_1 <=tmp_el_2.element\n  \n  \n  description_el=Element(None ,html.DIV,['description'])\n  tmp_el_1 <=description_el.element\n  \n  \n  menu_el=Element(None ,html.DIV,['ui','four','item','secondary','menu'])\n  description_el <=menu_el.element\n  \n  tmp_el_1=Element(None ,html.DIV,['ui','item'])\n  tmp_el_2=Button(has_icon=True ,button_class_attr=['ui','yellow','icon','big','button'],\n  icon_class_attr=['lightbulb','icon'])\n  tmp_el_2.element.id=f\"btn_{train_id}_light\"\n  tmp_el_2.set_clicked_callback(btn_function_clicked)\n  tmp_el_2.refresh()\n  tmp_el_1 <=tmp_el_2.element\n  menu_el <=tmp_el_1.element\n  \n  tmp_el_1=Element(None ,html.DIV,['ui','item'])\n  tmp_el_2=Button(has_icon=True ,button_class_attr=['ui','olive','icon','big','button'],\n  icon_class_attr=['bullhorn','icon'])\n  tmp_el_2.element.id=f\"btn_{train_id}_horn\"\n  tmp_el_2.set_clicked_callback(btn_function_clicked)\n  tmp_el_2.refresh()\n  tmp_el_1 <=tmp_el_2.element\n  menu_el <=tmp_el_1.element\n  \n  tmp_el_1=Element(None ,html.DIV,['ui','item'])\n  tmp_el_2=Button(has_icon=True ,button_class_attr=['ui','teal','icon','big','button'],\n  icon_class_attr=['volume','up','icon'])\n  tmp_el_2.element.id=f\"btn_{train_id}_sound1\"\n  tmp_el_2.set_clicked_callback(btn_function_clicked)\n  tmp_el_2.set_text(' 1')\n  tmp_el_1 <=tmp_el_2.element\n  menu_el <=tmp_el_1.element\n  \n  tmp_el_1=Element(None ,html.DIV,['ui','item'])\n  tmp_el_2=Button(has_icon=True ,button_class_attr=['ui','teal','icon','big','button'],\n  icon_class_attr=['volume','up','icon'])\n  tmp_el_2.element.id=f\"btn_{train_id}_sound2\"\n  tmp_el_2.set_clicked_callback(btn_function_clicked)\n  tmp_el_2.set_text(' 2')\n  tmp_el_1 <=tmp_el_2.element\n  menu_el <=tmp_el_1.element\n  \n  \n  tmp_el_1=Element(None ,html.DIV,['ui','horizontal','basic','segments'])\n  \n  tmp_el_2=Element(None ,html.DIV,['ui','center','align','basic','segment'])\n  tmp_el_2 <=html.BR()\n  tmp_el_2 <=html.BR()\n  self.dir=Element(None ,html.I,['arrow','alternate','circle','up','grey','massive','icon'])\n  self.dir.set_clicked_callback(self.change_direction)\n  self.dir.element.id=f\"btn_{train_id}_dir\"\n  tmp_el_2 <=self.dir.element\n  tmp_el_2 <=html.BR()\n  tmp_el_2 <=html.BR()\n  \n  tmp_el_1 <=tmp_el_2\n  \n  \n  tmp_el_2=Element(None ,html.DIV,['ui','center','align','basic','segment'])\n  \n  tmp_el_2.set_event_callback(\"wheel\",self.get_mousewheel)\n  \n  self.speed=Slider(None ,slider_class_attr=['ui','vertical','reversed','yellow','big','slider'])\n  self.speed.set_event_callback('click',self.slider_function_clicked)\n  self.speed.element.id=f\"btn_{train_id}_speed\"\n  tmp_el_2 <=self.speed\n  tmp_el_1 <=tmp_el_2\n  \n  description_el <=tmp_el_1\n  \n  slider_settings={\n  'min':0,\n  'max':3,\n  'start':0,\n  'step':1\n  }\n  \n  jq(self.speed.element).slider(slider_settings)\n  \n def change_direction(self,event):\n  if event.target.id ==f\"btn_{self.train_id}_dir\":\n   btn_classes=self.dir.get_classes()\n   if 'up'in btn_classes:\n    self.direction=\"B\"\n    self.dir.replace_classes(\n    plus_classes=['arrow','alternate','circle','down','outline','grey','huge','icon'],\n    minus_classes=['arrow','alternate','circle','up','grey','huge','icon']\n    )\n   elif 'down'in btn_classes:\n    self.direction=\"F\"\n    self.dir.replace_classes(\n    plus_classes=['arrow','alternate','circle','up','grey','huge','icon'],\n    minus_classes=['arrow','alternate','circle','down','outline','grey','huge','icon']\n    )\n    \n   jq(self.speed.element).slider('set value',0)\n   \n   self.send_speed_request(0)\n   \n def slider_function_clicked(self,event):\n  speed=jq(self.speed.element).slider('get value')\n  self.send_speed_request(speed)\n  \n def send_speed_request(self,speed):\n  if speed ==0:\n   cmd=\"STOP\"\n  elif speed in [1,2,3]:\n   cmd=f\"{self.direction}{speed}\"\n  print(f\"{server_address}/train/{self.train_id}/speed/{cmd}\")\n  ajax.post(f\"{server_address}/train/{self.train_id}/speed/{cmd}\")\n  \n def get_mousewheel(self,event):\n \n  event.preventDefault()\n  actual_speed=jq(self.speed.element).slider('get value')\n  try :\n   value=int(event.deltaY)\n   if value <0:\n    new_speed=min(actual_speed+1,3)\n    if new_speed !=actual_speed:\n     jq(self.speed.element).slider('set value',new_speed)\n     self.send_speed_request(new_speed)\n   elif value >0:\n    new_speed=max(actual_speed -1,0)\n    if new_speed !=actual_speed:\n     jq(self.speed.element).slider('set value',new_speed)\n     self.send_speed_request(new_speed)\n  except ValueError as e:\n   print(e)\n   \n   \ndef btn_function_clicked(event):\n elem_id=event.target.id\n if elem_id is '':\n \n  elem_id=event.target.parentElement.id\n _,train_id,function=elem_id.split('_')\n if function =='light':\n  print(f\"{server_address}/train/{train_id}/light\")\n  ajax.post(f\"{server_address}/train/{train_id}/light\")\n elif function =='horn':\n  print(f\"{server_address}/train/{train_id}/horn\")\n  ajax.post(f\"{server_address}/train/{train_id}/horn\")\n elif function =='sound1':\n  print(f\"{server_address}/train/{train_id}/sound1\")\n  ajax.post(f\"{server_address}/train/{train_id}/sound1\")\n elif function =='sound2':\n  print(f\"{server_address}/train/{train_id}/sound2\")\n  ajax.post(f\"{server_address}/train/{train_id}/sound2\")\n", ["browser", "scripts.deps", "ui.buttons", "ui.classes", "ui.slider"]], "scripts.deps": [".py", "from browser.local_storage import storage\n\n\nserver_address=None\nserver=None\nport=None\n\ntry :\n server=storage['server']\n port=storage['port']\n server_address=f\"http://{server}:{port}\"\n print(server_address)\n \nexcept KeyError:\n pass\n \n \ndef set_server(address,port):\n storage['server']=address\n storage['port']=port\n", ["browser.local_storage"]], "scripts.index": [".py", "from .lib_check_server import check_server\n\n\ndef index_main():\n check_server()\n", ["scripts.lib_check_server"]], "scripts.lib_check_server": [".py", "from browser import ajax\n\nfrom ui.labels import IconLabel\n\nfrom .deps import server_address\n\nconnection_status_label=IconLabel(\"connection_status_label\")\n\n\ndef check_server_reply(reply):\n if reply.text =='\"Maerklin MyWorld universal remote API\"':\n  connection_status_label.set_text(f\"Running on {server_address}\")\n  connection_status_label.set_classes(['ui','bottom','right','attached','label'])\n  connection_status_label.set_icon(['checkmark','icon'])\n  return True\n else :\n  connection_status_label.set_text(f\"Host {server_address} unreachable\")\n  connection_status_label.set_color('red')\n  connection_status_label.set_icon(['exclamation','triangle','icon'])\n  return False\n  \n  \ndef check_server():\n connection_status_label.set_classes(['ui','bottom','right','attached','label'])\n \n if server_address is not None :\n \n  ajax.get(server_address,oncomplete=check_server_reply)\n  print(f\"checking server on host: {server_address}\")\n else :\n \n  connection_status_label.set_text(\"Host not set\")\n  connection_status_label.set_color('red')\n  connection_status_label.set_icon(['exclamation','triangle','icon'])\n", ["browser", "scripts.deps", "ui.labels"]], "scripts.settings": [".py", "import json\n\nfrom browser import document,html,ajax,alert\n\nfrom ui.classes import Element\nfrom ui.dropdown import SelectionDropdown\nfrom ui.buttons import Button\n\nfrom .deps import server_address,server,port,set_server\nfrom .lib_check_server import check_server\nfrom .settings_deps import TrainSettingsCard,TrainDropdownItem,BoxCard\nfrom .boxes import box_list\n\n\ncard_field=Element('train_list_container',html.DIV)\nremove_train_selection=SelectionDropdown(\"remove_train_selection\",\"remove_train\",\ndefault_text=\"Select train\",\nicon_class_attr=[\"subway\",\"icon\"])\nmanage_train_selection=SelectionDropdown(\"manage_train_selection\",\"manage_train\",\ndefault_text=\"Select train\",\nicon_class_attr=[\"subway\",\"icon\"])\nboxes_art_field=Element('box_list_container',html.DIV)\n\n\ndef fake_callback(reply):\n print(reply.text)\n reply_data=json.loads(reply.text)\n try :\n  if reply_data['result']is False :\n   alert(reply_data['data']['error'])\n except KeyError:\n  alert(\"Command not performed correctly\")\n  \n  \ndef remove_train(event):\n train_id=str(remove_train_selection.get_value())\n ajax.post(f\"{server_address}/remove/train/{train_id}\",oncomplete=fake_callback)\n ajax.get(f\"{server_address}/train_list\",oncomplete=load_trains)\n \n \ndef new_train(event):\n el=Element(\"ipt_train_name\",html.INPUT)\n train_name=el.element.value\n el=Element(\"ipt_train_freq\",html.INPUT)\n train_freq=el.element.value\n ajax.post(f\"{server_address}/register/newtrain/{train_name}/{train_freq}\",oncomplete=fake_callback)\n ajax.get(f\"{server_address}/train_list\",oncomplete=load_trains)\n \n \ndef load_trains(reply):\n\n config=json.loads(reply.text)\n \n \n global card_field\n card_field.clear()\n for train_id,item in enumerate(config['data']['train_list']):\n \n  tc=TrainSettingsCard(train_id,item['name'],item['frequency'],item['box'])\n  card_field <=tc\n  \n  \n global remove_train_selection\n remove_train_selection.empty()\n for train_id,item in enumerate(config['data']['train_list']):\n  tc=TrainDropdownItem(train_id,item['name'])\n  remove_train_selection.add_element(tc)\n remove_train_selection.clear_value()\n \n \n global manage_train_selection\n manage_train_selection.empty()\n for train_id,item in enumerate(config['data']['train_list']):\n  tc=TrainDropdownItem(train_id,item['name'])\n  manage_train_selection.add_element(tc)\n manage_train_selection.clear_value()\n \n \ndef show_stored_server_address():\n el=Element(\"ipt_server_address\",html.INPUT)\n el.element.value=server\n el=Element(\"ipt_server_port\",html.INPUT)\n el.element.value=port\n \n \ndef save_stored_server_address(event):\n el=Element(\"ipt_server_address\",html.INPUT)\n new_server=el.element.value\n el=Element(\"ipt_server_port\",html.INPUT)\n new_port=el.element.value\n set_server(new_server,new_port)\n document.location.reload()\n \n \n \ndef configure_remote_port(event):\n el=Element(\"ipt_remote_port\",html.INPUT)\n remote_port=el.element.value\n ajax.post(f\"{server_address}/register/remote/{remote_port}\",oncomplete=fake_callback)\n \n \ndef change_train_management(event):\n src_element=event.srcElement.id\n if src_element not in (\"btn_change_train_name\",\"btn_change_train_frequency\",\"btn_change_train_box\"):\n  src_element=event.srcElement.parent.id\n  \n  \n train_id=str(manage_train_selection.get_value())\n if train_id ==\"\":\n  alert(\"Select a train to be modified!\")\n  return\n  \n if src_element ==\"btn_change_train_name\":\n  el=Element(\"ipt_change_train_name\",html.INPUT)\n  new_name=el.element.value\n  ajax.post(f\"{server_address}/register/train/{train_id}/name/{new_name}\",oncomplete=fake_callback)\n elif src_element ==\"btn_change_train_frequency\":\n  el=Element(\"ipt_change_train_frequency\",html.INPUT)\n  new_freq=el.element.value\n  ajax.post(f\"{server_address}/register/train/{train_id}/frequency/{new_freq}\",oncomplete=fake_callback)\n elif src_element ==\"btn_change_train_box\":\n  el=Element(\"ipt_change_train_box\",html.INPUT)\n  new_box=el.element.value\n  ajax.post(f\"{server_address}/register/train/{train_id}/box/{new_box}\",oncomplete=fake_callback)\n  \n ajax.get(f\"{server_address}/train_list\",oncomplete=load_trains)\n \n \ndef settings_main():\n check_server()\n show_stored_server_address()\n \n if server_address is not None :\n  ajax.get(f\"{server_address}/train_list\",oncomplete=load_trains)\n  \n  \n  \n btn_server_address=Button(\"btn_server_address\",has_icon=True ,\n button_class_attr=[\"ui\",\"icon\",\"primary\",\"button\"],\n icon_class_attr=[\"save\",\"icon\"])\n btn_server_address.set_clicked_callback(save_stored_server_address)\n \n \n btn_remote_port=Button(\"btn_remote_port\",has_icon=True ,\n button_class_attr=[\"ui\",\"icon\",\"primary\",\"button\"],\n icon_class_attr=[\"save\",\"icon\"])\n btn_remote_port.set_clicked_callback(configure_remote_port)\n \n \n btn_remove_train=Button(\"btn_remove_train\",has_icon=True ,\n button_class_attr=[\"ui\",\"icon\",\"orange\",\"button\"],\n icon_class_attr=[\"trash\",\"alternate\",\"icon\"])\n btn_remove_train.set_clicked_callback(remove_train)\n \n btn_new_train=Button(\"btn_new_train\",has_icon=True ,\n button_class_attr=[\"ui\",\"icon\",\"primary\",\"button\"],\n icon_class_attr=[\"save\",\"icon\"])\n btn_new_train.set_clicked_callback(new_train)\n \n \n btn_train_change=Button(\"btn_change_train_name\",has_icon=True ,\n button_class_attr=[\"ui\",\"icon\",\"primary\",\"button\"],\n icon_class_attr=[\"save\",\"icon\"])\n btn_train_change.set_clicked_callback(change_train_management)\n \n btn_train_change=Button(\"btn_change_train_frequency\",has_icon=True ,\n button_class_attr=[\"ui\",\"icon\",\"primary\",\"button\"],\n icon_class_attr=[\"save\",\"icon\"])\n btn_train_change.set_clicked_callback(change_train_management)\n \n btn_train_change=Button(\"btn_change_train_box\",has_icon=True ,\n button_class_attr=[\"ui\",\"icon\",\"primary\",\"button\"],\n icon_class_attr=[\"save\",\"icon\"])\n btn_train_change.set_clicked_callback(change_train_management)\n \n \n global boxes_art_field\n boxes_art_field.clear()\n for box in box_list:\n  box_card=BoxCard(box)\n  boxes_art_field <=box_card\n", ["browser", "json", "scripts.boxes", "scripts.deps", "scripts.lib_check_server", "scripts.settings_deps", "ui.buttons", "ui.classes", "ui.dropdown"]], "scripts.settings_deps": [".py", "from browser import html\n\nfrom ui.classes import Element\nfrom ui.lists import ListContainer,ListItem\nfrom ui.dropdown import DropdownItem\n\n\nclass TrainPropertyItem(ListItem):\n def __init__(self,header,value,icon):\n  super().__init__()\n  \n  tmp_el_1=Element(None ,html.I,\n  ['large','blue',icon,'middle','aligned','icon']\n  )\n  self <=tmp_el_1\n  \n  tmp_el_1=Element(None ,html.DIV,['content'])\n  self <=tmp_el_1\n  \n  tmp_el_2=Element(None ,html.DIV,['header'])\n  tmp_el_2.set_text(header)\n  tmp_el_1 <=tmp_el_2\n  \n  tmp_el_2=Element(None ,html.DIV,['description'])\n  tmp_el_2.set_text(str(value))\n  tmp_el_1 <=tmp_el_2\n  \n  \nclass TrainSettingsCard(Element):\n def __init__(self,train_id,train_name,frequency,box_code):\n  super().__init__(None ,html.DIV,['ui','card'])\n  \n  self.element.id=f\"train_{train_id}\"\n  self.train_id=train_id\n  \n  \n  tmp_el_1=Element(None ,html.DIV,['content'])\n  tmp_el_2=Element(None ,html.DIV,['header'])\n  tmp_el_2.set_text(train_name)\n  \n  \n  tmp_el_1 <=tmp_el_2.element\n  self <=tmp_el_1.element\n  \n  \n  tmp_el_1=Element(None ,html.DIV,['content'])\n  self.train_list=ListContainer(None ,TrainPropertyItem)\n  \n  \n  tmp_el_1 <=self.train_list\n  self <=tmp_el_1\n  \n  \n  train_properties=[\n  ('Remote frequency:',frequency,'wifi'),\n  ('Box code:',box_code,'barcode'),\n  ('Unique ID:',train_id,'terminal'),\n  ]\n  \n  for header,value,icon in train_properties:\n   self.train_list.add_element(TrainPropertyItem(header,value,icon))\n   \n   \nclass BoxCard(Element):\n def __init__(self,box_code):\n  super().__init__(None ,html.DIV,['ui','card'])\n  \n  \n  tmp_el_1=Element(None ,html.DIV,['content'])\n  tmp_el_2=Element(None ,html.DIV,['header'])\n  tmp_el_2.set_text(box_code)\n  \n  \n  tmp_el_1 <=tmp_el_2.element\n  self <=tmp_el_1.element\n  \n  \n  tmp_el_1=Element(None ,html.DIV,['image'])\n  tmp_el_2=Element(None ,html.IMG,[''])\n  tmp_el_2.element.src=f\"./data/{box_code}.jpg\"\n  \n  \n  tmp_el_1 <=tmp_el_2.element\n  self <=tmp_el_1.element\n  \n  \nclass TrainDropdownItem(DropdownItem):\n def __init__(self,train_id,train_name):\n  super().__init__(None )\n  self.set_text(f\"{train_name} [ID:{train_id}]\")\n  self.element.attrs[\"data-value\"]=str(train_id)\n  \n  self.refresh()\n", ["browser", "ui.classes", "ui.dropdown", "ui.lists"]], "scripts": [".py", "VERSION='v1.1'\nprint(f\"[*] MyWorld universal remote library version: {VERSION}\")\n", [], 1]}
__BRYTHON__.update_VFS(scripts)
